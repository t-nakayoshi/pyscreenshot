#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0b1 on Fri Aug 30 19:02:21 2024
#

import os
import sys

import wx
import wx.lib.agw.multidirdialog as MDD

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

_NO_CONSOLE = False
_debug_mode = True

def _debug_print(message: str):
    global debug_mode

    if not _NO_CONSOLE and _debug_mode:
        sys.stdout.write(f'[debug]:{message}\n')


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.SYSTEM_MENU
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((200, 200))
        self.SetTitle("frame")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.button_settingdlg = wx.Button(self.panel_1, wx.ID_ANY, u"環境設定...")
        sizer_2.Add(self.button_settingdlg, 1, wx.ALL | wx.EXPAND, 8)

        self.button_periodicdlg = wx.Button(self.panel_1, wx.ID_ANY, u"定期実行設定...")
        sizer_2.Add(self.button_periodicdlg, 1, wx.ALL | wx.EXPAND, 8)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.button_settingdlg.Bind(wx.EVT_BUTTON, self.on_open_settings_dlg)
        self.button_periodicdlg.Bind(wx.EVT_BUTTON, self.on_open_periodic_setteings_dlg)
        # end wxGlade

    def on_open_settings_dlg(self, event):  # wxGlade: MyFrame.<event_handler>
        with SettingsDialog(None, wx.ID_ANY, "") as dlg:
            dlg.ShowModal()
        event.Skip()

    def on_open_periodic_setteings_dlg(self, event):  # wxGlade: MyFrame.<event_handler>
        with PeriodicDialog(None, wx.ID_ANY, "") as dlg:
            id = dlg.ShowModal()
            if id == wx.ID_OK:
                print(f'periodic_id=OK({id})')
            elif id == wx.ID_CANCEL:
                print(f'periodic_id=CANCEL({id})')
            elif id == wx.ID_STOP:
                print(f'periodic_id=STOP({id})')
            else:
                print(f'periodic_id={id}')
        event.Skip()

# end of class MyFrame

class SettingsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SettingsDialog.__init__
        self.BTN_ID_ADD  = 1001
        self.BTN_ID_DEL  = 1002
        self.BTN_ID_UP   = 1003
        self.BTN_ID_DOWN = 1004
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 400))
        self.SetTitle(u"環境設定")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.notebook_1_pane_1, u"基本設定")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self.notebook_1_pane_1, wx.ID_ANY)
        sizer_3.Add(self.panel_1, 2, wx.ALL | wx.EXPAND, 2)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, u"保存先"), wx.VERTICAL)

        self.radio_btn_inquire_allways = wx.RadioButton(sizer_4.GetStaticBox(), wx.ID_ANY, u"保存ファイルを毎回指定する", style=wx.RB_GROUP)
        sizer_4.Add(self.radio_btn_inquire_allways, 0, wx.EXPAND | wx.LEFT, 4)

        self.radio_btn_auto_save = wx.RadioButton(sizer_4.GetStaticBox(), wx.ID_ANY, u"ファイル自動保存")
        sizer_4.Add(self.radio_btn_auto_save, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.TOP, 4)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_15, 1, wx.EXPAND, 0)

        self.list_box_auto_save_folders = wx.ListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_NEEDED_SB | wx.LB_SINGLE)
        sizer_15.Add(self.list_box_auto_save_folders, 1, wx.ALL | wx.EXPAND, 2)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 0, wx.ALL | wx.EXPAND, 2)

        self.button_add_folder = wx.Button(self.panel_1, self.BTN_ID_ADD, u"追加")
        sizer_5.Add(self.button_add_folder, 0, 0, 0)

        self.button_del_folder = wx.Button(self.panel_1, self.BTN_ID_DEL, u"削除")
        sizer_5.Add(self.button_del_folder, 0, 0, 0)

        sizer_5.Add((20, 20), 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.button_up_folder = wx.Button(self.panel_1, self.BTN_ID_UP, u"△")
        sizer_5.Add(self.button_up_folder, 0, 0, 0)

        self.button_down_folder = wx.Button(self.panel_1, self.BTN_ID_DOWN, u"▽")
        sizer_5.Add(self.button_down_folder, 0, 0, 0)

        self.panel_2 = wx.Panel(self.notebook_1_pane_1, wx.ID_ANY)
        sizer_3.Add(self.panel_2, 0, wx.ALL | wx.EXPAND, 2)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, u"ナンバリング"), wx.VERTICAL)

        self.radio_btn_numbering_datetime = wx.RadioButton(sizer_6.GetStaticBox(), wx.ID_ANY, u"日時 (yyyymmdd_hhmmss)", style=wx.RB_GROUP)
        sizer_6.Add(self.radio_btn_numbering_datetime, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT, 4)

        self.radio_btn_nubering_prefix_sequence = wx.RadioButton(sizer_6.GetStaticBox(), wx.ID_ANY, u"接頭語+シーケンス番号")
        sizer_6.Add(self.radio_btn_nubering_prefix_sequence, 0, wx.EXPAND | wx.LEFT, 4)

        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_6.Add(sizer_7, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT, 4)

        label_2 = wx.StaticText(sizer_7.GetStaticBox(), wx.ID_ANY, u"接頭語: ")
        sizer_7.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_prefix = wx.TextCtrl(sizer_7.GetStaticBox(), wx.ID_ANY, "")
        self.text_ctrl_prefix.SetMinSize((49, 23))
        sizer_7.Add(self.text_ctrl_prefix, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(sizer_7.GetStaticBox(), wx.ID_ANY, u"シーケンス桁数: ")
        sizer_7.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        self.spin_ctrl_sequence_digits = wx.SpinCtrl(sizer_7.GetStaticBox(), wx.ID_ANY, "6", min=1, max=6, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        self.spin_ctrl_sequence_digits.SetMinSize((40, 23))
        sizer_7.Add(self.spin_ctrl_sequence_digits, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_4 = wx.StaticText(sizer_7.GetStaticBox(), wx.ID_ANY, u"開始番号: ")
        sizer_7.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        self.spin_ctrl_sequence_begin = wx.SpinCtrl(sizer_7.GetStaticBox(), wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        self.spin_ctrl_sequence_begin.SetMinSize((48, 23))
        sizer_7.Add(self.spin_ctrl_sequence_begin, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.notebook_1_pane_2, u"その他の設定")

        sizer_9 = wx.BoxSizer(wx.VERTICAL)

        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_18, 1, wx.EXPAND, 0)

        self.checkbox_capture_mcursor = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"マウスカーソルをキャプチャーする")
        self.checkbox_capture_mcursor.Enable(False)
        sizer_18.Add(self.checkbox_capture_mcursor, 1, wx.ALL | wx.EXPAND, 4)

        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_19, 1, wx.EXPAND, 0)

        self.checkbox_sound_on_capture = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"キャプチャー終了時に音を鳴らす")
        sizer_19.Add(self.checkbox_sound_on_capture, 1, wx.ALL | wx.EXPAND, 4)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_8, 1, wx.EXPAND, 0)

        self.checkbox_delayed_capture = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"遅延キャプチャー")
        self.checkbox_delayed_capture.SetMinSize((89, 15))
        sizer_8.Add(self.checkbox_delayed_capture, 0, wx.ALL | wx.EXPAND, 4)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(sizer_10, 0, wx.EXPAND, 0)

        self.spin_ctrl_delayed_time = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "5", min=1, max=60, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        self.spin_ctrl_delayed_time.SetMinSize((44, 23))
        sizer_10.Add(self.spin_ctrl_delayed_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_5 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"秒後")
        sizer_10.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_11, 1, wx.EXPAND, 0)

        self.checkbox_trimming = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, u"トリミング")
        self.checkbox_trimming.SetMinSize((68, 15))
        sizer_11.Add(self.checkbox_trimming, 0, wx.ALL | wx.EXPAND, 4)

        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11.Add(sizer_12, 0, wx.EXPAND, 0)

        label_6 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"上: ")
        sizer_12.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.spin_ctrl_trimming_top = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        sizer_12.Add(self.spin_ctrl_trimming_top, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_7 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"下: ")
        sizer_12.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.spin_ctrl_trimming_bottom = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        sizer_12.Add(self.spin_ctrl_trimming_bottom, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_8 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"左: ")
        sizer_12.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.spin_ctrl_trimming_left = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        sizer_12.Add(self.spin_ctrl_trimming_left, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_9 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"右: ")
        sizer_12.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.spin_ctrl_trimming_right = wx.SpinCtrl(self.notebook_1_pane_2, wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        sizer_12.Add(self.spin_ctrl_trimming_right, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_20 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"ホット・キー"), wx.HORIZONTAL)
        sizer_9.Add(sizer_20, 1, wx.EXPAND | wx.RIGHT | wx.TOP, 2)

        sizer_21 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"修飾キー"), wx.HORIZONTAL)
        sizer_20.Add(sizer_21, 1, wx.EXPAND, 0)

        sizer_23 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"クリップボードコピー"), wx.VERTICAL)
        sizer_21.Add(sizer_23, 0, wx.EXPAND, 0)

        self.radio_btn_hotkey_bmp_ctrl_alt = wx.RadioButton(sizer_23.GetStaticBox(), wx.ID_ANY, "Ctrl+Alt", style=wx.RB_GROUP)
        self.radio_btn_hotkey_bmp_ctrl_alt.SetValue(1)
        sizer_23.Add(self.radio_btn_hotkey_bmp_ctrl_alt, 1, 0, 0)

        self.radio_btn_hotkey_bmp_ctrl_shift = wx.RadioButton(sizer_23.GetStaticBox(), wx.ID_ANY, "Ctrl+Shift")
        sizer_23.Add(self.radio_btn_hotkey_bmp_ctrl_shift, 1, 0, 0)

        sizer_24 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"PNG保存"), wx.VERTICAL)
        sizer_21.Add(sizer_24, 0, wx.EXPAND | wx.LEFT, 4)

        self.radio_btn_hotkey_png_ctrl_alt = wx.RadioButton(sizer_24.GetStaticBox(), wx.ID_ANY, "Ctrl+Alt", style=wx.RB_GROUP)
        sizer_24.Add(self.radio_btn_hotkey_png_ctrl_alt, 1, 0, 0)

        self.radio_btn_hotkey_png_ctrl_shift = wx.RadioButton(sizer_24.GetStaticBox(), wx.ID_ANY, "Ctrl+Shift")
        self.radio_btn_hotkey_png_ctrl_shift.SetValue(1)
        sizer_24.Add(self.radio_btn_hotkey_png_ctrl_shift, 1, 0, 0)

        sizer_22 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, u"ターゲット"), wx.VERTICAL)
        sizer_20.Add(sizer_22, 1, wx.EXPAND | wx.LEFT, 4)

        grid_sizer_3 = wx.FlexGridSizer(3, 2, 1, 1)
        sizer_22.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        label_12 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"デスクトップ: ")
        grid_sizer_3.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.TOP, 2)

        label_13 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "0")
        grid_sizer_3.Add(label_13, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_14 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"ディスプレイ: ")
        grid_sizer_3.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.TOP, 2)

        label_15 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"1 ～")
        grid_sizer_3.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_16 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"アクティブウィンドウ: ")
        grid_sizer_3.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 2)

        self.choice_hotkey_active_window = wx.Choice(self.notebook_1_pane_2, wx.ID_ANY, choices=["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"])
        self.choice_hotkey_active_window.SetSelection(8)
        grid_sizer_3.Add(self.choice_hotkey_active_window, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM, 2)

        sizer_9.Add((20, 8), 1, wx.EXPAND, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.notebook_1_pane_2.SetSizer(sizer_9)

        self.panel_2.SetSizer(sizer_6)

        self.panel_1.SetSizer(sizer_4)

        self.notebook_1_pane_1.SetSizer(sizer_3)

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Centre()

        self.button_add_folder.Bind(wx.EVT_BUTTON, self.on_save_folder_add)
        self.button_del_folder.Bind(wx.EVT_BUTTON, self.on_save_folder_del)
        self.button_up_folder.Bind(wx.EVT_BUTTON, self.on_save_folder_move)
        self.button_down_folder.Bind(wx.EVT_BUTTON, self.on_save_folder_move)
        self.radio_btn_hotkey_bmp_ctrl_alt.Bind(wx.EVT_RADIOBUTTON, self.on_btn_hotkey_bmp_ctrl_alt)
        self.radio_btn_hotkey_bmp_ctrl_shift.Bind(wx.EVT_RADIOBUTTON, self.on_btn_hotkey_bmp_ctrl_shift)
        self.radio_btn_hotkey_png_ctrl_alt.Bind(wx.EVT_RADIOBUTTON, self.on_btn_hotkey_png_ctrl_alt)
        self.radio_btn_hotkey_png_ctrl_shift.Bind(wx.EVT_RADIOBUTTON, self.on_btn_hotkey_png_ctrl_shift)
        # end wxGlade

    def on_save_folder_add(self, event):  # wxGlade: SettingsDialog.<event_handler>
        """自動保存フォルダの追加
        """
        defaultPath = os.getcwd()
        agwstyle = MDD.DD_MULTIPLE|MDD.DD_DIR_MUST_EXIST
        with MDD.MultiDirDialog(None, title="フォルダの追加", defaultPath=defaultPath, agwStyle=agwstyle) as dlg:
            if dlg.ShowModal() != wx.ID_OK:
                return
            paths = dlg.GetPaths()
            for folder in paths:
                self.list_box_auto_save_folders.Append(folder)
                print(f'Add {folder}')
        event.Skip()

    def on_save_folder_del(self, event):  # wxGlade: SettingsDialog.<event_handler>
        """自動保存フォルダの削除
        """
        index = self.list_box_auto_save_folders.GetSelection()
        if index != wx.NOT_FOUND:
            self.list_box_auto_save_folders.Delete(index)
        event.Skip()

    def on_save_folder_move(self, event):  # wxGlade: SettingsDialog.<event_handler>
        """自動保存フォルダの移動（上下）
        """
        index = self.list_box_auto_save_folders.GetSelection()
        id = event.GetId()

        move = 0
        limit = False
        if id == self.BTN_ID_UP:
            move = -1
            limit = True if index > 0 else False
        else:
            move = 1
            limit = True if index < (self.list_box_auto_save_folders.GetCount() - 1) else False

        if index != wx.NOT_FOUND and limit:
            folder = self.list_box_auto_save_folders.GetString(index)
            print(f'folder={index}:{folder}')
            self.list_box_auto_save_folders.Delete(index)
            self.list_box_auto_save_folders.Insert(folder, index + move)
            self.list_box_auto_save_folders.SetSelection(index + move)
        event.Skip()

    """ HotKey: 修飾キーの切り替え制御 """
    def on_btn_hotkey_bmp_ctrl_alt(self, event):  # wxGlade: SettingsDialog.<event_handler>
        self.radio_btn_hotkey_png_ctrl_shift.SetValue(True)
        event.Skip()

    def on_btn_hotkey_bmp_ctrl_shift(self, event):  # wxGlade: SettingsDialog.<event_handler>
        self.radio_btn_hotkey_png_ctrl_alt.SetValue(True)
        event.Skip()

    def on_btn_hotkey_png_ctrl_alt(self, event):  # wxGlade: SettingsDialog.<event_handler>
        self.radio_btn_hotkey_bmp_ctrl_shift.SetValue(True)
        event.Skip()

    def on_btn_hotkey_png_ctrl_shift(self, event):  # wxGlade: SettingsDialog.<event_handler>
        self.radio_btn_hotkey_bmp_ctrl_alt.SetValue(True)
        event.Skip()

    def set_prop(self, prop: dict):
        """設定値をコントロールに反映する
        """
        #--- 基本設定
        # 自動/手動
        if prop['auto_save']:
            self.radio_btn_auto_save.SetValue(True)
        else:
            self.radio_btn_inquire_allways.SetValue(True)
        # 自動保存フォルダ
        for folder in prop['save_folders']:
            self.list_box_auto_save_folders.Append(folder)
        self.list_box_auto_save_folders.SetSelection(prop['save_folder_index'])
        # ナンバリング
        if prop['numbering'] == 0:
            self.radio_btn_numbering_datetime.SetValue(True)
        else:
            self.radio_btn_nubering_prefix_sequence.SetValue(True)
        # 接頭語/シーケンス桁数/開始番号
        self.text_ctrl_prefix.SetValue(prop['prefix'])
        self.spin_ctrl_sequence_digits.SetValue(prop['sequence_digits'])
        self.spin_ctrl_sequence_begin.SetValue(prop['sequence_begin'])
        #--- その他の設定
        # マスカーソルをキャプチャする/キャプチャ終了時に音を鳴らす
        self.checkbox_capture_mcursor.SetValue(prop['capture_mcursor'])
        self.checkbox_sound_on_capture.SetValue(prop['sound_on_capture'])
        # 遅延キャプチャ
        self.checkbox_delayed_capture.SetValue(prop['delayed_capture'])
        self.spin_ctrl_delayed_time.SetValue(prop['delayed_time'])
        # トリミング
        self.checkbox_trimming.SetValue(prop['trimming'])
        self.spin_ctrl_trimming_top.SetValue(prop['trimming_size'][0])
        self.spin_ctrl_trimming_bottom.SetValue(prop['trimming_size'][1])
        self.spin_ctrl_trimming_left.SetValue(prop['trimming_size'][2])
        self.spin_ctrl_trimming_right.SetValue(prop['trimming_size'][3])
        # ホット・キー
        if prop['hotkey_clipboard'] == 0:
            self.radio_btn_hotkey_bmp_ctrl_alt.SetValue(True)
            self.radio_btn_hotkey_png_ctrl_shift.SetValue(True)
        else:
            self.radio_btn_hotkey_bmp_ctrl_shift.SetValue(True)
            self.radio_btn_hotkey_png_ctrl_alt.SetValue(True)
        # ターゲット
        self.choice_hotkey_active_window.Select(prop['hotkey_activewin'])

    def get_prop(self, prop: dict):
        """設定値をプロパティに反映する
        """
        #--- 基本設定
        # 自動/手動
        prop['auto_save'] = self.radio_btn_auto_save.GetValue()
        # 自動保存フォルダ
        prop['save_folders'].clear()
        for folder in self.list_box_auto_save_folders.Items:
            prop['save_folders'].append(folder)
        prop['save_folder_index'] = self.list_box_auto_save_folders.GetSelection()
        # ナンバリング
        if self.radio_btn_numbering_datetime.GetValue():
            prop['numbering'] = 0
        else:
            prop['numbering'] = 1
        # 接頭語/シーケンス桁数/開始番号
        prop['prefix'] = self.text_ctrl_prefix.GetValue()
        prop['sequence_digits'] = self.spin_ctrl_sequence_digits.GetValue()
        prop['sequence_begin']  = self.spin_ctrl_sequence_begin.GetValue()
        #--- その他の設定
        # マスカーソルをキャプチャする/キャプチャ終了時に音を鳴らす
        prop['capture_mcursor']  = self.checkbox_capture_mcursor.GetValue()
        prop['sound_on_capture'] = self.checkbox_sound_on_capture.GetValue()
        # 遅延キャプチャ
        prop['delayed_capture'] = self.checkbox_delayed_capture.GetValue()
        prop['delayed_time']    = self.spin_ctrl_delayed_time.GetValue()
        # トリミング
        prop['trimming'] = self.checkbox_trimming.GetValue()
        prop['trimming_size'] = [
            self.spin_ctrl_trimming_top.GetValue(),
            self.spin_ctrl_trimming_bottom.GetValue(),
            self.spin_ctrl_trimming_left.GetValue(),
            self.spin_ctrl_trimming_right.GetValue()
        ]
        # ホット・キー
        if self.radio_btn_hotkey_bmp_ctrl_alt.GetValue():
            prop['hotkey_clipboard'] = 0
            prop['hotkey_imagefile'] = 1
        else:
            prop['hotkey_clipboard'] = 1
            prop['hotkey_imagefile'] = 0
        # ターゲット
        prop['hotkey_activewin'] = self.choice_hotkey_active_window.GetSelection()

# end of class SettingsDialog

class PeriodicDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PeriodicDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((400, 240))
        self.SetTitle(u"定期実行設定")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 2)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 4)

        label_1 = wx.StaticText(self, wx.ID_ANY, u"保存先: ")
        sizer_4.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_periodic_folder = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_4.Add(self.text_ctrl_periodic_folder, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.button_periodic_folder_brows = wx.Button(self, wx.ID_ANY, "...")
        self.button_periodic_folder_brows.SetMinSize((25, 23))
        sizer_4.Add(self.button_periodic_folder_brows, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_5, 0, wx.ALL | wx.EXPAND, 4)

        label_2 = wx.StaticText(self, wx.ID_ANY, u"間　隔: ")
        sizer_5.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 4)

        self.spin_ctrl_periodic_interval = wx.SpinCtrl(self, wx.ID_ANY, "3", min=1, max=3600, style=wx.ALIGN_RIGHT | wx.SP_ARROW_KEYS)
        sizer_5.Add(self.spin_ctrl_periodic_interval, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 4)

        label_3 = wx.StaticText(self, wx.ID_ANY, u"秒")
        sizer_5.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        label_4 = wx.StaticText(self, wx.ID_ANY, u"終了キー: ")
        sizer_5.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 24)

        self.choice_periodic_stopkey_modifire = wx.Choice(self, wx.ID_ANY, choices=["none", "Shift", "Ctrl", "Alt"])
        self.choice_periodic_stopkey_modifire.SetSelection(0)
        sizer_5.Add(self.choice_periodic_stopkey_modifire, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, "+")
        sizer_5.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)

        self.choice_periodic_stop_fkey = wx.Choice(self, wx.ID_ANY, choices=["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"])
        self.choice_periodic_stop_fkey.SetSelection(10)
        sizer_5.Add(self.choice_periodic_stop_fkey, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 4)

        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"対象"), wx.VERTICAL)
        sizer_6.Add(sizer_7, 0, wx.EXPAND, 0)

        self.choice_periodic_capture_target = wx.Choice(sizer_7.GetStaticBox(), wx.ID_ANY, choices=[u"デスクトップ", u"アクティブウィンドウ"])
        self.choice_periodic_capture_target.SetSelection(0)
        sizer_7.Add(self.choice_periodic_capture_target, 0, wx.ALL, 4)

        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"ナンバリング"), wx.VERTICAL)
        sizer_6.Add(sizer_8, 0, wx.EXPAND | wx.LEFT, 4)

        self.radio_btn_periodic_numbering_datetime = wx.RadioButton(sizer_8.GetStaticBox(), wx.ID_ANY, u"日時 (yyyymmdd_hhmmss)", style=wx.RB_GROUP)
        self.radio_btn_periodic_numbering_datetime.SetValue(1)
        sizer_8.Add(self.radio_btn_periodic_numbering_datetime, 0, wx.ALL, 4)

        self.radio_btn_periodic_numbering_autosave = wx.RadioButton(sizer_8.GetStaticBox(), wx.ID_ANY, u"自動保存の設定に従う")
        sizer_8.Add(self.radio_btn_periodic_numbering_autosave, 0, wx.ALL, 4)

        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(sizer_9, 1, wx.EXPAND, 0)

        self.button_periodic_start = wx.Button(self, wx.ID_EXECUTE, u"開始")
        self.button_periodic_start.Enable(False)
        sizer_9.Add(self.button_periodic_start, 1, wx.ALL | wx.EXPAND, 4)

        self.button_periodic_stop = wx.Button(self, wx.ID_STOP, u"終了")
        self.button_periodic_stop.Enable(False)
        sizer_9.Add(self.button_periodic_stop, 0, wx.ALL | wx.EXPAND, 4)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Centre()

        self.button_periodic_folder_brows.Bind(wx.EVT_BUTTON, self.on_save_folder_browse)
        self.button_periodic_start.Bind(wx.EVT_BUTTON, self.on_periodic_capture_ctrl)
        self.button_periodic_stop.Bind(wx.EVT_BUTTON, self.on_periodic_capture_ctrl)
        # end wxGlade

    def on_save_folder_browse(self, event):  # wxGlade: PeriodicDialog.<event_handler>
        """保存フォルダの選択
        """
        defaultPath = self.text_ctrl_periodic_folder.GetValue()
        if len(defaultPath) == 0 or not os.path.exists(defaultPath):
            defaultPath = os.getcwd()
        agwstyle = MDD.DD_MULTIPLE|MDD.DD_DIR_MUST_EXIST
        with MDD.MultiDirDialog(None, title="フォルダの選択", defaultPath=defaultPath, agwStyle=agwstyle) as dlg:
            if dlg.ShowModal() != wx.ID_OK:
                return
            paths = dlg.GetPaths()
            for folder in paths:
                self.text_ctrl_periodic_folder.SetValue(folder)
                print(f'Set {folder}')
        event.Skip()

    def on_periodic_capture_ctrl(self, event):  # wxGlade: PeriodicDialog.<event_handler>
        print("Event handler 'on_periodic_capture_ctrl' not implemented!")
        self.EndModal(event.GetId())
        event.Skip()

    def set_prop(self, prop: dict):
        """設定値をコントロールに反映する
        """
        # 実行状態によるボタンの有効/無効設定
        self.button_periodic_start.Enable(not prop['periodic_capture'])
        self.button_periodic_stop.Enable(prop['periodic_capture'])
        # 保存フォルダ
        self.text_ctrl_periodic_folder.SetValue(prop['periodic_save_folder'])
        # 間隔
        self.spin_ctrl_periodic_interval.SetValue(prop['periodic_interval'])
        # 停止キー（修飾キー）
        self.choice_periodic_stopkey_modifire.Select(prop['periodic_stop_modifier'])
        self.choice_periodic_stop_fkey.Select(prop['periodic_stop_fkey'])
        # ターゲット
        for i in range(prop['display']):
            item = f'ディスプレイ {i + 1}'
            self.choice_periodic_capture_target.Insert(item, self.choice_periodic_capture_target.GetCount() - 1)
        if prop['periodic_target'] == -1:
            self.choice_periodic_capture_target.Select(self.choice_periodic_capture_target.GetCount() - 1)
        else:
            self.choice_periodic_capture_target.Select(prop['periodic_target'])
        # ナンバリング
        if prop['periodic_numbering'] == 0:
            self.radio_btn_periodic_numbering_datetime.SetValue(True)
        else:
            self.radio_btn_periodic_numbering_autosave.SetValue(True)

    def get_prop(self, prop: dict):
        """設定値をプロパティに反映する
        """
        # 保存フォルダ
        prop['periodic_save_folder'] = self.text_ctrl_periodic_folder.GetValue()
        # 間隔
        prop['periodic_interval'] = self.spin_ctrl_periodic_interval.GetValue()
        # 停止キー（修飾キー）
        prop['periodic_stop_modifier'] = self.choice_periodic_stopkey_modifire.GetSelection()
        prop['periodic_stop_fkey']     = self.choice_periodic_stop_fkey.GetSelection()
        # ターゲット
        index = self.choice_periodic_capture_target.Selection()
        if index == (self.choice_periodic_capture_target.GetCount() - 1):
            prop['periodic_target'] = -1
        else:
            prop['periodic_target'] = index
        # ナンバリング
        if self.radio_btn_periodic_numbering_datetime.GetValue():
            prop['periodic_numbering'] = 0
        else:
            prop['periodic_numbering'] = 1

# end of class PeriodicDialog


class MyApp(wx.App):
    def OnInit(self):
        # self.settingsdlg = SettingsDialog(None, wx.ID_ANY, "")
        # self.SetTopWindow(self.settingsdlg)
        # self.settingsdlg.ShowModal()
        # self.settingsdlg.Destroy()
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp()
    app.MainLoop()
