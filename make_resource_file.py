#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
""" make_resource_file.py
リソースデータ作成ツール
"""
from res.res_func import convert_base64

from wx.tools import img2py


def create_resource(resource_files: list, filename: str):
    """ファイルからリソースファイル(.py)を生成する
    """
    max_len = 72
    lines = []
    lines.append('#----------------------------------------------------------------------\n')
    lines.append(f'# This file was generated by {os.path.basename(__file__)}\n')
    lines.append('#\n')
    lines.append('from res.res_func import convert_stream\n')
    lines.append('\n\n')
    try:
        with open(filename, mode='w', encoding='utf-8', newline='\n') as wfd:
            wfd.writelines(lines)

    except OSError as e:
        print(f'Resource file "{filename}" create failed.({e})')
        return

    for file in resource_files:
        data_str = convert_base64(file[0])
        lines.clear()
        lines.append('#----------------------------------------------------------------------\n')
        lines.append(f'_{file[1]} = """\n')
        data_lines = len(data_str) // max_len
        pos = 0
        if data_lines > 0:
            for l in range(1, data_lines + 1):
                lines.append(data_str[pos:(max_len * l)] + '\n')
                pos += max_len
        if len(data_str) % max_len > 0:
            lines.append(data_str[pos:] + '\n')
        lines.append('"""\n\n')

        lines.append(f'def get_{file[1]}_stream():\n')
        lines.append(f'    return convert_stream(_{file[1]})\n')
        lines.append('\n\n')
        lines.append(f'def get_{file[1]}():\n')
        lines.append(f'    return _{file[1]}\n')
        lines.append('\n')

        try:
            with open(filename, mode='a', encoding='utf-8', newline='\n') as wfd:
                wfd.writelines(lines)

            print(f'Embedded {file[0]} using "{file[1]}" into {filename}')

        except OSError as e:
            print(f'Resource file "{filename}" create failed.({e})')
            break


def create_menu_image_resource(image_files: list, resource_file: str):
    """画像ファイルからリソースファイルを生成する
    """
    append = False
    for f in image_files:
        img2py.img2py(image_file=f[0], python_file=resource_file, imgName=f[1], append=append, catalog=True)
        append = True


if __name__ == "__main__":
    import os

    RES_DIR = f'.{os.sep}res'

    """アイコンリソースファイルの生成
    """
    # アイコンファイル、リソース名
    app_icon_files = [
        (os.path.join(RES_DIR, 'ScreenShot.ico'), 'app_icon')
    ]
    # 生成
    create_resource(app_icon_files, os.path.join(RES_DIR, 'app_icon.py'))

    """音源リソースファイルの生成
    """
    sound_files = [
        (os.path.join(RES_DIR, '決定、ボタン押下8.wav'), 'snd_success'),
        (os.path.join(RES_DIR, '警告音1.wav'), 'snd_beep')
    ]
    # 生成
    create_resource(sound_files, os.path.join(RES_DIR, 'sound.py'))

    """画像リソースファイルの生成
    """
    # 画像ファイル、リソース名リスト
    image_files = [
        (os.path.join(RES_DIR, 'StatusHelp.png'), 'get_icon_help'),
        (os.path.join(RES_DIR, 'Settings.png'), 'get_icon_settings'),
        (os.path.join(RES_DIR, 'SwitchFolders.png'), 'get_icon_auto_save_folder'),
        (os.path.join(RES_DIR, 'FolderOpened.png'), 'menu_icon_open_folder'),
        (os.path.join(RES_DIR, 'StartTime.png'), 'menu_icon_periodic_capture_settings'),
        (os.path.join(RES_DIR, 'Copy.png'), 'menu_icon_copy_to_clipboard'),
        (os.path.join(RES_DIR, 'Image.png'), 'menu_icon_save_to_png'),
        (os.path.join(RES_DIR, 'Exit.png'), 'menu_icon_exit')
    ]
    # 生成
    create_menu_image_resource(image_files, os.path.join(RES_DIR, 'menu_image.py'))

